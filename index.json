[{"authors":["admin"],"categories":null,"content":"I am a highly self-motivated learner who has a huge passion toward data.\n","date":1598313600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1598313600,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/author/siqi-mo/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/siqi-mo/","section":"authors","summary":"I am a highly self-motivated learner who has a huge passion toward data.","tags":null,"title":"Siqi Mo","type":"authors"},{"authors":["Siqi Mo"],"categories":["Deployment","website"],"content":"This article offers a sample guide of setting up personal website with HUGO and publishing it with GitHub Pages in macOS.\nNowadays, people are showing the great things they are building by publishing websites. Instead of making website from raw HTML and CSS, we can use Static site generators, like Jekyll, Octopress, Pelican, Middleman, and Hugo. I picked Hugo to build my blog. Codes for this website are shared in my github\nHugo site creation The following content refered to [1] https://themes.gohugo.io/anatole/\n[2] https://gohugo.io/getting-started/quick-start/ [3] https://wowchemy.com/docs/install-locally/#install-with-git\nStep 1: Install Hugo For MacOS users, itâ€™s recommended to do it through homebrew, just like for most open-source software.\nbrew install hugo  Step 2: Create new site The following will create a new Hugo site in a folder named \u0026ldquo;filenam\u0026rdquo; under root directory. Default root directory for MacOS will be /Users/yourID. All the file required to finish the website would be in this folder.\nhugo new site filename  Step 3: Construct a theme One of the adcantages of Hugo is that it contains many nice themes, see themes.gohugo.io. I picked Academic.\nA standard way for this part is\ncd filename git init git submodule add https://github.com/lxndrblz/anatole.git themes/anatole  Then, create site configuration:\necho 'theme = \u0026quot;academic\u0026quot;' \u0026gt;\u0026gt; config.toml  With this code, config.toml would contain basic information for the website. Then you can edit config.toml with text editor.I would recommend Sublime Text.\nActually, one easy way to do this is to download the theme from GitHub directly and then customize it!\ngit clone https://github.com/wowchemy/starter-academic.git git submodule update --init --recursive   For a beginer, I suggest copying the demo config.toml of the theme. Then we can modify parameters correspondingly. Documentation of each theme would always discuss the parameters in details.\n Step 4: Post new blog Now we would be able to add new post to our blog. For example, we can create brand-new post.\nhugo new posts/my-first-post.md  For me, I downloaded the example content files of the them. These files gave me a quick insight of the post format. Then I would be able to modity the content e.g. adding images, paragraphs,and codeboxes.\nStep 5: Run the Hugo server With this code, you can see your new site at http://localhost:1313/.\nhugo server -D  Website Publication with GitHub Pages  GitHub Pages provides really convenience method to publish personal website. There is no need to configure server and set up database.\n1: Create a repository  Create a new repository named username.github.io, where username must be your username on GitHub. Then clone the new repository in the folder you would like to store this project.\ngit clone https://github.com/username/username.github.io  2: Deploy Hugo site  GitHub Pages can not actually recognize the file format of hugo. Therefore, we would need to generate HTML files that can be read by Github for Hugo site. To do this, we firstly need to open config.toml and make the following modification: baseURL = \u0026#34;https://mokszekei.github.io/\u0026#34; languageCode = \u0026#34;en\u0026#34; DefaultContentLanguage = \u0026#34;en\u0026#34; title = \u0026#34;Website of Siqi Mo\u0026#34; theme = \u0026#34;anatole\u0026#34; summarylength = 10 enableEmoji = true enableRobotsTXT = true publishDir = \u0026#34;mokszekei.github.io\u0026#34; Now, Hugo know it need to output our HTML files to \u0026lt;github_username\u0026gt;.github.io. Go to the directory of your Hugo project, run the following command:  hugo   Then Hugo will generate the HTML which customize the content in your site. All of these html, css files would be in public folder. The next step we can do is copying and pasting files inside public to the GitHub repository. And then, post it.  git add . git commit -m \u0026quot;host my website\u0026quot; git push origin master  Done! You shoud be able to view your website https://username.github.io. You can also go to the github repository, press setting and roll down to Github Pages to see whether your website is successfully published.\n ","date":1598313600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598313600,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"/post/getting-started/","publishdate":"2020-08-25T00:00:00Z","relpermalink":"/post/getting-started/","section":"post","summary":"This article offers a sample guide of setting up personal website with HUGO and publishing it with GitHub Pages in macOS.","tags":["Hugo","GitHub Pages"],"title":"Build personal website with HUGO","type":"post"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"/project/external-project/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/project/external-project/","section":"project","summary":"GitHub link for my website files","tags":["HUGO"],"title":"Personal Website in HUGO","type":"project"}]